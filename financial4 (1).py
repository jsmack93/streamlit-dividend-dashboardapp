# -*- coding: utf-8 -*-
"""financial4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fl8p0bWuOMC6tyqgbknA7JzLEVkN_Z2L
"""

#!pip install streamlit

import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Set the page title
st.title("Financial Dashboard")

# Sidebar input: prompt the user to enter a ticker symbol
ticker_symbol = st.sidebar.text_input("Enter the ticker symbol (e.g., AAPL)", value="AAPL")

if ticker_symbol:
    # Retrieve data for the entered ticker using yfinance
    ticker_data = yf.Ticker(ticker_symbol)
    info = ticker_data.info

    # ---------------------------
    # 1. Company Overview
    # ---------------------------
    st.subheader("Company Overview")
    if 'longBusinessSummary' in info:
        st.write(info['longBusinessSummary'])
    else:
        st.write("No overview available.")

    # ---------------------------
    # 2. Dividend History (Last 10 Entries)
    # ---------------------------
    st.subheader("Dividend History (Last 10 Entries)")
    dividends = ticker_data.dividends
    if dividends.empty:
        st.write("No dividend data available for this ticker.")
    else:
        # To avoid clutter, show only the last 10 entries if there are more than 10
        data_to_plot = dividends.tail(10) if len(dividends) > 10 else dividends
        st.write(data_to_plot)

        fig, ax = plt.subplots(figsize=(10, 4))
        ax.bar(data_to_plot.index.astype(str), data_to_plot)  # convert dates to string for clarity
        ax.set_title("Dividend History")
        ax.set_xlabel("Date")
        ax.set_ylabel("Dividend ($)")
        plt.xticks(rotation=45)
        st.pyplot(fig)

    # ---------------------------
    # 3. Price History (Last 1 Year)
    # ---------------------------
    st.subheader("Price History (Last 1 Year)")
    price_history = ticker_data.history(period="1y")
    if price_history.empty:
        st.write("No price data available for this ticker.")
    else:
        st.write(price_history[['Close']].head())  # display first few rows for preview
        fig_price, ax_price = plt.subplots(figsize=(10, 4))
        ax_price.plot(price_history.index, price_history['Close'], label="Closing Price")
        ax_price.set_title("Price History (Last 1 Year)")
        ax_price.set_xlabel("Date")
        ax_price.set_ylabel("Price ($)")
        ax_price.legend()
        st.pyplot(fig_price)

    # ---------------------------
    # 4. Key Financial Metrics
    # ---------------------------
    st.subheader("Key Financial Metrics")
    trailing_eps = info.get('trailingEps', None)
    dividend_rate = info.get('dividendRate', None)
    dividend_yield = info.get('dividendYield', None)

    # Calculate a simple dividend payout ratio (Dividend Rate / Trailing EPS) if possible
    if trailing_eps and trailing_eps != 0 and dividend_rate:
        dividend_payout_ratio = dividend_rate / trailing_eps
    else:
        dividend_payout_ratio = None

    st.write("**Trailing EPS:**", trailing_eps if trailing_eps is not None else "N/A")
    st.write("**Dividend Rate:**", dividend_rate if dividend_rate is not None else "N/A")
    st.write("**Dividend Yield:**", f"{dividend_yield:.2%}" if dividend_yield is not None else "N/A")
    if dividend_payout_ratio is not None:
        st.write("**Dividend Payout Ratio:**", round(dividend_payout_ratio, 2))
    else:
        st.write("Dividend payout ratio could not be calculated due to missing data.")