# -*- coding: utf-8 -*-
"""financial2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mm9PycvC7MA2b8Ta5mhDartyqpGxMHPr
"""

# Commented out IPython magic to ensure Python compatibility.
# # Install the required packages
# !pip install streamlit yfinance pandas matplotlib pyngrok
# 
# # Write the Streamlit app code to dashboard_app.py
# %%writefile dashboard_app.py
# import streamlit as st
# import yfinance as yf
# import pandas as pd
# import matplotlib.pyplot as plt
# 
# # --------------------------
# # Sidebar: Ticker Selection
# # --------------------------
# st.sidebar.title("S&P 500 Dashboard")
# # For demonstration, we use a simple list of tickers.
# sp500_tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']
# selected_ticker = st.sidebar.selectbox("Select a company ticker", sp500_tickers)
# 
# # --------------------------
# # Retrieve Data with yfinance
# # --------------------------
# ticker_data = yf.Ticker(selected_ticker)
# info = ticker_data.info
# 
# # --------------------------
# # Dashboard Title and Overview
# # --------------------------
# st.title(f"{selected_ticker} Financial Dashboard")
# st.subheader("Company Overview")
# if 'longBusinessSummary' in info:
#     st.write(info['longBusinessSummary'])
# else:
#     st.write("No overview available.")
# 
# # --------------------------
# # Chart 1: Dividend History
# # --------------------------
# st.header("Dividend History")
# dividends = ticker_data.dividends
# 
# if dividends.empty:
#     st.write("No dividend data available for this ticker.")
# else:
#     fig_div, ax_div = plt.subplots(figsize=(10, 4))
#     dividends.plot(kind='bar', ax=ax_div)
#     ax_div.set_title("Dividend History")
#     ax_div.set_xlabel("Date")
#     ax_div.set_ylabel("Dividend ($)")
#     st.pyplot(fig_div)
# 
# # --------------------------
# # Chart 2: Price History
# # --------------------------
# st.header("Price History")
# price_history = ticker_data.history(period="1y")
# if price_history.empty:
#     st.write("No price data available for this ticker.")
# else:
#     fig_price, ax_price = plt.subplots(figsize=(10, 4))
#     ax_price.plot(price_history.index, price_history['Close'], label="Closing Price")
#     ax_price.set_title("Price History (Last 1 Year)")
#     ax_price.set_xlabel("Date")
#     ax_price.set_ylabel("Price ($)")
#     ax_price.legend()
#     st.pyplot(fig_price)
# 
# # --------------------------
# # Chart 3: Financial Metrics Display
# # --------------------------
# st.header("Key Financial Metrics")
# 
# # Retrieve basic financial metrics
# trailing_eps = info.get('trailingEps', None)
# dividend_rate = info.get('dividendRate', None)
# dividend_yield = info.get('dividendYield', None)
# 
# # Calculate a simple dividend payout ratio (Dividend Rate / Trailing EPS) if possible
# if trailing_eps and trailing_eps != 0 and dividend_rate:
#     dividend_payout_ratio = dividend_rate / trailing_eps
# else:
#     dividend_payout_ratio = None
# 
# # Display metrics side
#

# Commented out IPython magic to ensure Python compatibility.
# # Install the required packages
# !pip install streamlit yfinance pandas matplotlib pyngrok
# 
# # Write the Streamlit app code to dashboard_app.py
# %%writefile dashboard_app.py
# import streamlit as st
# import yfinance as yf
# import pandas as pd
# import matplotlib.pyplot as plt
# 
# # --------------------------
# # Sidebar: Ticker Selection
# # --------------------------
# st.sidebar.title("S&P 500 Dashboard")
# # For demonstration, we use a simple list of tickers.
# sp500_tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']
# selected_ticker = st.sidebar.selectbox("Select a company ticker", sp500_tickers)
# 
# # --------------------------
# # Retrieve Data with yfinance
# # --------------------------
# ticker_data = yf.Ticker(selected_ticker)
# info = ticker_data.info
# 
# # --------------------------
# # Dashboard Title and Overview
# # --------------------------
# st.title(f"{selected_ticker} Financial Dashboard")
# st.subheader("Company Overview")
# if 'longBusinessSummary' in info:
#     st.write(info['longBusinessSummary'])
# else:
#     st.write("No overview available.")
# 
# # --------------------------
# # Chart 1: Dividend History
# # --------------------------
# st.header("Dividend History")
# dividends = ticker_data.dividends
# 
# if dividends.empty:
#     st.write("No dividend data available for this ticker.")
# else:
#     fig_div, ax_div = plt.subplots(figsize=(10, 4))
#     dividends.plot(kind='bar', ax=ax_div)
#     ax_div.set_title("Dividend History")
#     ax_div.set_xlabel("Date")
#     ax_div.set_ylabel("Dividend ($)")
#     st.pyplot(fig_div)
# 
# # --------------------------
# # Chart 2: Price History
# # --------------------------
# st.header("Price History")
# price_history = ticker_data.history(period="1y")
# if price_history.empty:
#     st.write("No price data available for this ticker.")
# else:
#     fig_price, ax_price = plt.subplots(figsize=(10, 4))
#     ax_price.plot(price_history.index, price_history['Close'], label="Closing Price")
#     ax_price.set_title("Price History (Last 1 Year)")
#     ax_price.set_xlabel("Date")
#     ax_price.set_ylabel("Price ($)")
#     ax_price.legend()
#     st.pyplot(fig_price)
# 
# # --------------------------
# # Chart 3: Financial Metrics Display
# # --------------------------
# st.header("Key Financial Metrics")
# 
# # Retrieve basic financial metrics
# trailing_eps = info.get('trailingEps', None)
# dividend_rate = info.get('dividendRate', None)
# dividend_yield = info.get('dividendYield', None)
# 
# # Calculate a simple dividend payout ratio (Dividend Rate / Trailing EPS) if possible
# if trailing_eps and trailing_eps != 0 and dividend_rate:
#     dividend_payout_ratio = dividend_rate / trailing_eps
# else:
#     dividend_payout_ratio = None
# 
# # Display metrics side by side using Streamlit columns
# col1, col2, col3 = st.columns(3)
# 
# if trailing_eps is not None:
#     col1.metric("Trailing EPS", f"{trailing_eps:.2f}")
# else:
#     col1.metric("Trailing EPS", "N/A")
# 
# if dividend_rate is not None:
#     col2.metric("Dividend Rate", f"{dividend_rate:.2f}")
# else:
#     col2.metric("Dividend Rate", "N/A")
# 
# if dividend_yield is not None:
#     col3.metric("Dividend Yield", f"{dividend_yield:.2%}")
# else:
#     col3.metric("Dividend Yield", "N/A")
# 
# if dividend_payout_ratio is not None:
#     st.write(f"**Dividend Payout Ratio:** {dividend_payout_ratio:.2f}")
# else:
#     st.write("Dividend payout ratio could not be calculated due to missing data.")
# 
# # Launch the Streamlit app using pyngrok
# from pyngrok import ngrok
# import subprocess
# import time
# 
# # Kill any existing ngrok processes
# !pkill -f ngrok
# 
# # Open an ngrok tunnel on port 8501 (Streamlit's default port)
# public_url = ngrok.connect(port=8501)
# print("Public URL:", public_url)
# 
# # Launch the Streamlit app with CORS disabled
# process = subprocess.Popen(["streamlit", "run", "dashboard_app.py", "--server.enableCORS", "false"],
#                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
# 
# # Wait for the app to start up (increase sleep time if necessary)
# time.sleep(15)
# print("Streamlit app should be running now. Click the Public URL above to view it.")
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile dashboard_app.py
# import streamlit as st
# import yfinance as yf
# import pandas as pd
# import matplotlib.pyplot as plt
# 
# # --------------------------
# # Sidebar: Ticker Selection
# # --------------------------
# st.sidebar.title("S&P 500 Dashboard")
# # For demonstration, we use a simple list of tickers.
# sp500_tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']
# selected_ticker = st.sidebar.selectbox("Select a company ticker", sp500_tickers)
# 
# # --------------------------
# # Retrieve Data with yfinance
# # --------------------------
# ticker_data = yf.Ticker(selected_ticker)
# info = ticker_data.info
# 
# # --------------------------
# # Dashboard Title and Overview
# # --------------------------
# st.title(f"{selected_ticker} Financial Dashboard")
# st.subheader("Company Overview")
# if 'longBusinessSummary' in info:
#     st.write(info['longBusinessSummary'])
# else:
#     st.write("No overview available.")
# 
# # --------------------------
# # Chart 1: Dividend History
# # --------------------------
# st.header("Dividend History")
# dividends = ticker_data.dividends
# if dividends.empty:
#     st.write("No dividend data available for this ticker.")
# else:
#     fig_div, ax_div = plt.subplots(figsize=(10, 4))
#     dividends.plot(kind='bar', ax=ax_div)
#     ax_div.set_title("Dividend History")
#     ax_div.set_xlabel("Date")
#     ax_div.set_ylabel("Dividend ($)")
#     st.pyplot(fig_div)
# 
# # --------------------------
# # Chart 2: Price History
# # --------------------------
# st.header("Price History")
# price_history = ticker_data.history(period="1y")
# if price_history.empty:
#     st.write("No price data available for this ticker.")
# else:
#     fig_price, ax_price = plt.subplots(figsize=(10, 4))
#     ax_price.plot(price_history.index, price_history['Close'], label="Closing Price")
#     ax_price.set_title("Price History (Last 1 Year)")
#     ax_price.set_xlabel("Date")
#     ax_price.set_ylabel("Price ($)")
#     ax_price.legend()
#     st.pyplot(fig_price)
# 
# # --------------------------
# # Chart 3: Financial Metrics Display
# # --------------------------
# st.header("Key Financial Metrics")
# trailing_eps = info.get('trailingEps', None)
# dividend_rate = info.get('dividendRate', None)
# dividend_yield = info.get('dividendYield', None)
# if trailing_eps and trailing_eps != 0 and dividend_rate:
#     dividend_payout_ratio = dividend_rate / trailing_eps
# else:
#     dividend_payout_ratio = None
# col1, col2, col3 = st.columns(3)
# if trailing_eps is not None:
#     col1.metric("Trailing EPS", f"{trailing_eps:.2f}")
# else:
#     col1.metric("Trailing EPS", "N/A")
# if dividend_rate is not None:
#     col2.metric("Dividend Rate", f"{dividend_rate:.2f}")
# else:
#     col2.metric("Dividend Rate", "N/A")
# if dividend_yield is not None:
#     col3.metric("Dividend Yield", f"{dividend_yield:.2%}")
# else:
#     col3.metric("Dividend Yield", "N/A")
# if dividend_payout_ratio is not None:
#     st.write(f"**Dividend Payout Ratio:** {dividend_payout_ratio:.2f}")
# else:
#     st.write("Dividend payout ratio could not be calculated due to missing data.")
#