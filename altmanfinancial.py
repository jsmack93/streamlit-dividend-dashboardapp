# -*- coding: utf-8 -*-
"""altmanfinancial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U2SRHbHrC4vn0-9jDRt6xvE-Smd551EN
"""

import streamlit as st
import yfinance as yf

############################################
# Helper functions for Altman Z‑Score
############################################

def get_bs_value(bs, col, keys):
    """
    Searches the balance sheet DataFrame for the first matching key.
    Comparison is done case‑insensitively after stripping whitespace.
    Returns the value from the specified column if found; otherwise, None.
    """
    for key in keys:
        for bs_key in bs.index:
            if bs_key.strip().lower() == key.strip().lower():
                return bs.loc[bs_key][col]
    return None

def get_fs_value(fs, col, keys):
    """
    Searches the financials (income statement) DataFrame for the first matching key.
    Comparison is case‑insensitive.
    Returns the value from the specified column if found; otherwise, None.
    """
    for key in keys:
        for fs_key in fs.index:
            if fs_key.strip().lower() == key.strip().lower():
                return fs.loc[fs_key][col]
    return None

def compute_altman_z(ticker: str):
    """
    Retrieves data for the given ticker using yfinance and calculates the Altman Z‑Score.

    The formula used is:
      Z = 1.2 * (Working Capital / Total Assets) +
          1.4 * (Retained Earnings / Total Assets) +
          3.3 * (EBIT / Total Assets) +
          0.6 * (Market Value of Equity / Total Liabilities) +
          (Sales / Total Assets)

    Essential data includes:
      - Total Assets (looked up by "Total Assets")
      - Total Liabilities (looked up by "Total Liab", "Total Liabilities", or "Total Liabilities Net Minority Interest")
      - Market Value of Equity (computed from share price and shares outstanding)

    Returns a tuple (z_score, classification) if successful; otherwise, (None, error_message).
    """
    t_obj = yf.Ticker(ticker)
    bs = t_obj.balance_sheet
    fs = t_obj.financials
    info = t_obj.info

    if bs is None or bs.empty:
        return None, f"Balance sheet data not available for ticker {ticker}."
    if fs is None or fs.empty:
        return None, f"Financial statement data not available for ticker {ticker}."

    try:
        bs_col = bs.columns[0]  # most recent reporting period
    except Exception:
        return None, "Could not determine the latest balance sheet period."
    try:
        fs_col = fs.columns[0]
    except Exception:
        return None, "Could not determine the latest financial statement period."

    # Retrieve balance sheet metrics.
    total_assets = get_bs_value(bs, bs_col, ["Total Assets"])
    total_liabilities = get_bs_value(bs, bs_col, ["Total Liab", "Total Liabilities", "Total Liabilities Net Minority Interest"])
    current_assets = get_bs_value(bs, bs_col, ["Total Current Assets", "Current Assets"])
    current_liabilities = get_bs_value(bs, bs_col, ["Total Current Liabilities", "Current Liabilities"])
    working_capital = current_assets - current_liabilities if (current_assets is not None and current_liabilities is not None) else None
    retained_earnings = get_bs_value(bs, bs_col, ["Retained Earnings"])

    # Retrieve income statement metrics.
    ebit = get_fs_value(fs, fs_col, ["Operating Income", "EBIT"])
    sales = get_fs_value(fs, fs_col, ["Total Revenue", "Revenue", "Sales"])

    # Compute Market Value of Equity.
    share_price = info.get('regularMarketPrice', None)
    shares_outstanding = info.get('sharesOutstanding', None)
    market_value_of_equity = share_price * shares_outstanding if (share_price is not None and shares_outstanding is not None) else None

    # Check for essential data.
    if total_assets is None or total_liabilities is None or market_value_of_equity is None:
        msg = (
            f"Essential data missing for ticker {ticker}. "
            f"Total Assets: {total_assets}, Total Liabilities: {total_liabilities}, "
            f"Market Value of Equity: {market_value_of_equity}"
        )
        return None, msg

    # Compute component ratios (defaulting missing non-essential ones to 0.0).
    ratio1 = (working_capital / total_assets) if working_capital is not None else 0.0
    ratio2 = (retained_earnings / total_assets) if retained_earnings is not None else 0.0
    ratio3 = (ebit / total_assets) if ebit is not None else 0.0
    ratio4 = (market_value_of_equity / total_liabilities) if total_liabilities != 0 else 0.0
    ratio5 = (sales / total_assets) if sales is not None else 0.0

    # Calculate the Altman Z‑Score.
    z_score = 1.2 * ratio1 + 1.4 * ratio2 + 3.3 * ratio3 + 0.6 * ratio4 + ratio5

    # Determine classification.
    if z_score > 2.99:
        classification = "Safe Zone"
    elif z_score >= 1.81:
        classification = "Grey Zone"
    else:
        classification = "Distressed Zone"

    return z_score, classification

############################################
# Main App
############################################

st.title("Financial Dashboard")
st.markdown("Welcome to your integrated financial dashboard. Use the sidebar to select an analysis.")

# Sidebar navigation to select analysis type.
analysis_choice = st.sidebar.radio("Select Analysis", ["Altman Z‑Score", "Other Analysis"])

if analysis_choice == "Altman Z‑Score":
    st.header("Altman Z‑Score Calculator")
    ticker = st.text_input("Enter ticker symbol (e.g., AAPL)", value="AAPL", key="ticker_input")
    if st.button("Calculate Altman Z‑Score"):
        if ticker:
            with st.spinner("Calculating Altman Z‑Score..."):
                z_score, classification = compute_altman_z(ticker)
                if z_score is not None:
                    st.success(f"Altman Z‑Score: {z_score:.2f}")
                    st.info(f"Classification: {classification}")
                else:
                    st.error(classification)
        else:
            st.error("Please enter a ticker symbol.")
elif analysis_choice == "Other Analysis":
    st.header("Other Financial Analysis")
    st.markdown("This section can include your other financial analyses (e.g., Dividend History, Price Trends, etc.).")
    # You can insert or integrate your previous code for the other analyses here.